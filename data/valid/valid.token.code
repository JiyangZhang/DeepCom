protected void expect null missing when null unsupported ( string message ) { try { assert false ( message , actual contents ( ) . contains ( null ) ) ; } catch ( null pointer exception tolerated ) { } }
protected c reset container ( ) { return reset container ( get subject generator ( ) . create test subject ( ) ) ; }
protected c reset container ( c new value ) { container = new value ; return container ; }
public static void main ( string [ ] args ) throws exception { uimanager . set look and feel ( uimanager . get system look and feel class name ( ) ) ; if ( system . get property ( str_ ) == null ) { system . set property ( str_ , str_ ) ; } thread . set default uncaught exception handler ( ( thread , throwable ) -> new error dialog ( throwable ) . set visible ( bool_ ) ) ; string filename = null ; @ suppress warnings ( { str_ } ) string password = str_ ; boolean view pages = bool_ ; for ( int i = num_ ; i < args . length ; i ++ ) { switch ( args [ i ] ) { case password : i ++ ; if ( i >= args . length ) { usage ( ) ; } password = args [ i ] ; break ; case view_structure : view pages = bool_ ; break ; default : filename = args [ i ] ; break ; } } final pdfdebugger viewer = new pdfdebugger ( view pages ) ; log dialog . init ( viewer , viewer . status bar . get log label ( ) ) ; system . set property ( str_ , str_ ) ; text dialog . init ( viewer ) ; if ( pdtype1 font . courier . is standard14 ( ) ) { pddevice cmyk . instance . to rgb ( new float [ ] { num_ , num_ , num_ , num_ } ) ; pddevice rgb . instance . to rgb ( new float [ ] { num_ , num_ , num_ } ) ; iioregistry . get default instance ( ) ; filter factory . instance . get filter ( cosname . flate_decode ) ; } if ( filename != null ) { file file = new file ( filename ) ; if ( file . exists ( ) ) { viewer . read pdffile ( filename , password ) ; } } viewer . set visible ( bool_ ) ; }
private static void usage ( ) { string message = str_ + str_ + str_ + str_ + str_ ; system . err . println ( message ) ; system . exit ( num_ ) ; }
private void load configuration ( ) { file file = new file ( str_ ) ; if ( file . exists ( ) ) { try { try ( input stream is = new file input stream ( file ) ) { configuration . load ( is ) ; } } catch ( ioexception e ) { throw new runtime exception ( e ) ; } } }
public void set initial saved state ( saved state state ) { throw new unsupported operation exception ( str_ ) ; }
public fragment manager get fragment manager ( ) { throw new unsupported operation exception ( str_ ) ; }
public bundle get arguments ( ) { throw new unsupported operation exception ( str_ ) ; }
public void set arguments ( bundle args ) { throw new unsupported operation exception ( str_ ) ; }
